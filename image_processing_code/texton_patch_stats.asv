function [counts, area, orientation, eccentricity, lacuniarity] = texton_patch_stats(texton_image,n_categories)

% INPUT

%
% OUTPUT

% Written by R.A. Manzuk
%
% 11/15/2022
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% BEGIN %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % one easy thing to return is the number of pixels assigned to each
    % category
    % start by getting the baseline group counts
    [initial_counts, categories] = groupcounts(texton_image(:));
    
    % need to check that all categories are there, if not, insert a 0
    if numel(categories) < n_categories
        % figure out which ones are missing by comparting categories with a
        % perfect list
        missing = setdiff([1:n_categories],categories);
        
        % will be easiest to loop through the missing vector in case there
        % is more than one
        for i = 1:numel(missing)
            initial_counts = [initial_counts(1:missing(i)-1); 0; initial_counts(missing(i):end)];
        end

        counts = initial_counts;
    else
        % otherwise the initial counts are fine.
        counts = initial_counts;
    end

    % we also want to go into each category and get some stats on patch
    % size, etc. 
    % set up empty stuff to hold data
    area = [];
    orientation = [];
    eccentricity = [];
    lacuniarity = [];
    % so we loop through each category
    for i = 1:n_categories
        % binarize for just this category
        class_binary = texton_image == i;
        
        % take the region props
        reg_props = regionprops(class_binary, 'Area', 'Orientation', 'Eccentricity');

        % set up a vector to accompany the region props as a category label
        % in the final output
        cat_label = ones(numel(reg_props),1).*i;
        
        % and put the stats in place
        area = [area;extractfield(reg_props,'Area')',cat_label];
        orientation = [orientation;extractfield(reg_props,'Orientation')',cat_label];
        eccentricity = [eccentricity;extractfield(reg_props,'Eccentricity')',cat_label];

        % and get the lacuniarity
        [max_box_size,lacuniarity(:,i)] = calc_lacuniarity(~class_binary);

    end

end







